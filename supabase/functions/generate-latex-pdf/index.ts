
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

// CORS headers for browser access
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Main handler function
serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Get report data from request
    const { report, property } = await req.json();
    
    console.log("Received request to generate PDF for property:", property.address);
    
    // Generate LaTeX content
    const latexContent = generateReportLatex(report, property);
    
    // Compile LaTeX to PDF using external service
    const pdfBase64 = await compileLatexToPdf(latexContent);
    
    // Return the PDF data
    return new Response(
      JSON.stringify({ 
        success: true, 
        pdfData: pdfBase64,
        message: "PDF successfully generated" 
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json'
        } 
      }
    );
  } catch (error) {
    console.error("Error generating PDF:", error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message,
        message: "Failed to generate PDF" 
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json'
        } 
      }
    );
  }
});

// Function to generate LaTeX content from report data
function generateReportLatex(report, property) {
  // Start with document preamble
  let latex = `\\documentclass[12pt,a4paper]{article}
\\usepackage{graphicx}
\\usepackage{geometry}
\\usepackage{array}
\\usepackage{booktabs}
\\usepackage{colortbl}
\\usepackage{xcolor}
\\usepackage{hyperref}
\\usepackage{longtable}
\\usepackage{enumitem}
\\usepackage{fancyhdr}
\\usepackage{titlesec}

\\geometry{margin=2.5cm}
\\hypersetup{colorlinks=true, linkcolor=blue, urlcolor=blue}
\\setlength{\\parindent}{0pt}
\\setlength{\\parskip}{6pt}
\\pagestyle{fancy}
\\renewcommand{\\headrulewidth}{0.4pt}
\\renewcommand{\\footrulewidth}{0.4pt}

\\definecolor{headercolor}{RGB}{33, 62, 84}
\\definecolor{lightheadercolor}{RGB}{70, 130, 180}

\\begin{document}

% Cover Page
\\begin{titlepage}
\\centering
\\vspace*{1cm}
{\\color{headercolor}\\Huge\\bfseries ${report.type === "comparison" ? "Comparison Report" : "Inventory and Check In Report"} \\par}
\\vspace{2cm}
{\\LARGE ${property.address} \\par}
{\\large ${property.city}, ${property.state} ${property.zipCode} \\par}
\\vspace{1cm}

% Report Details
\\begin{tabular}{rp{8cm}}
\\textbf{Report Date:} & ${formatDate(report.reportInfo?.reportDate)} \\\\
\\textbf{Inspector:} & ${report.reportInfo?.clerk || "Not specified"} \\\\
\\textbf{Status:} & ${formatString(report.status)} \\\\
${report.reportInfo?.tenantName ? `\\textbf{Tenant:} & ${report.reportInfo.tenantName} \\\\` : ""}
\\end{tabular}

\\vfill

{\\large Generated by Share.AI Property Reports \\par}
\\end{titlepage}`;

  // Table of Contents
  latex += `
\\tableofcontents
\\newpage

% Disclaimer
\\section*{Disclaimer}
\\addcontentsline{toc}{section}{Disclaimer}
This inventory and condition report has been prepared to provide a fair and accurate record of the condition of the items included in the inventory and the property's cleanliness at the time of inspection. The report will be used as a reference at the end of the tenancy to assess any damages or cleaning requirements.

\\noindent Please note:
\\begin{itemize}
  \\item This report does not identify or comment on structural defects.
  \\item This report does not check any item for safety unless explicitly stated.
  \\item All items are assumed to be working and in good condition unless otherwise stated.
\\end{itemize}
\\newpage`;

  // Summary tables
  if (report.type !== "comparison") {
    latex += `
% Summary Tables
\\section*{Property Summary}
\\addcontentsline{toc}{section}{Property Summary}
\\begin{tabular}{|p{5cm}|p{10cm}|}
\\hline
\\rowcolor{lightheadercolor} \\textbf{Property Address} & \\textbf{Description} \\\\
\\hline
${property.address}, ${property.city} & ${property.description || "No description provided"} \\\\
\\hline
\\end{tabular}

\\vspace{1cm}

\\begin{tabular}{|p{5cm}|p{10cm}|}
\\hline
\\rowcolor{lightheadercolor} \\textbf{Item} & \\textbf{Status} \\\\
\\hline
Keys Received & ${report.reportInfo?.keysReceived ? "Yes" : "No"} \\\\
\\hline
Smoke Alarms Tested & ${report.reportInfo?.smokeAlarmsChecked ? "Yes" : "No"} \\\\
\\hline
\\end{tabular}
\\newpage`;
  }

  // Special handling for comparison report
  if (report.type === "comparison" && report.reportInfo?.comparisonText) {
    latex += `
% Comparison Section
\\section*{Property Comparison}
\\addcontentsline{toc}{section}{Property Comparison}
${report.reportInfo.comparisonText.split('\n').join(' \\\\\n')}
\\newpage`;
  } else {
    // Process each room
    report.rooms.forEach((room, index) => {
      latex += generateRoomLatex(room, index + 1);
    });
  }

  // Add disclaimers if present
  if (report.disclaimers && report.disclaimers.length > 0) {
    latex += `
% Disclaimers
\\section*{Disclaimers}
\\addcontentsline{toc}{section}{Disclaimers}
\\begin{itemize}
${report.disclaimers.map(disclaimer => `  \\item ${disclaimer}`).join('\n')}
\\end{itemize}`;
  }

  // End document
  latex += `
\\end{document}`;

  return latex;
}

// Function to generate LaTeX for a single room
function generateRoomLatex(room, roomNumber) {
  let latex = `
% Room ${roomNumber}: ${room.name}
\\section{${room.name}}
`;

  // Room general information
  if (room.generalCondition || room.notes) {
    latex += `
\\subsection*{General Condition}
${room.generalCondition || "No general condition information provided."}

${room.notes ? `\\subsection*{Notes}\n${room.notes}` : ""}
`;
  }

  // Room images
  if (room.images && room.images.length > 0) {
    latex += `
\\subsection*{Room Images}
`;
    
    // Create a grid of images (2 per row)
    for (let i = 0; i < room.images.length; i += 2) {
      latex += `\\begin{center}\n`;
      
      // First image in the row
      latex += `\\includegraphics[width=0.45\\textwidth]{${room.images[i].url}}`;
      
      // Second image if available
      if (i + 1 < room.images.length) {
        latex += ` \\hspace{0.05\\textwidth} \\includegraphics[width=0.45\\textwidth]{${room.images[i+1].url}}`;
      }
      
      latex += `\\end{center}\n\n`;
    }
  }

  // Components
  if (room.components && room.components.length > 0) {
    latex += `
\\subsection*{Room Components}
`;

    room.components.forEach(component => {
      latex += generateComponentLatex(component);
    });
  }

  // Add page break after room
  latex += `\\newpage\n`;

  return latex;
}

// Function to generate LaTeX for a component
function generateComponentLatex(component) {
  let latex = `
\\subsubsection*{${component.name}}

\\begin{tabular}{|p{3cm}|p{12cm}|}
\\hline
\\rowcolor{lightheadercolor} \\textbf{Attribute} & \\textbf{Details} \\\\
\\hline
Description & ${component.description || "No description provided"} \\\\
\\hline
Condition & ${component.condition?.summary || "Not assessed"} \\\\
\\hline
Cleanliness & ${formatString(component.cleanliness) || "Not assessed"} \\\\
\\hline
${component.notes ? `Notes & ${component.notes} \\\\\n\\hline` : ""}
\\end{tabular}
`;

  // Component images
  if (component.images && component.images.length > 0) {
    // Create a grid of images (2 per row)
    for (let i = 0; i < component.images.length; i += 2) {
      latex += `\\begin{center}\n`;
      
      // First image in the row
      latex += `\\includegraphics[width=0.45\\textwidth]{${component.images[i].url}}`;
      
      // Second image if available
      if (i + 1 < component.images.length) {
        latex += ` \\hspace{0.05\\textwidth} \\includegraphics[width=0.45\\textwidth]{${component.images[i+1].url}}`;
      }
      
      latex += `\\end{center}\n\n`;
    }
  }

  return latex;
}

// Helper function to format string with capitalization and underscore replacement
function formatString(str) {
  if (!str) return "";
  return str.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
}

// Helper function to format date
function formatDate(dateString) {
  if (!dateString) return "Not specified";
  try {
    return new Date(dateString).toLocaleDateString();
  } catch {
    return dateString;
  }
}

// Function to compile LaTeX to PDF using a third-party API
async function compileLatexToPdf(latexContent) {
  try {
    // For demonstration, we're simulating the LaTeX to PDF conversion
    // In a production environment, this would call a real LaTeX compilation service
    console.log("Compiling LaTeX to PDF...");
    
    // For now, return a dummy base64 PDF data
    // In production, this would be replaced with actual LaTeX compilation
    return "JVBERi0xLjcKJeLjz9MKNSAwIG9iago8PCAvVHlwZSAvUGFnZSAvUGFyZW50IDEgMCBSIC9MYXN0TW9kaWZpZWQgKEQ6MjAyMzA0MTExMDEwMDArMDInMDAnKSAvUmVzb3VyY2VzIDIgMCBSIC9NZWRpYUJveCBbMC4wMDAwMDAgMC4wMDAwMDAgNTk1LjI3NjAwMCA4NDEuODkwMDAwXSAvQ3JvcEJveCBbMC4wMDAwMDAgMC4wMDAwMDAgNTk1LjI3NjAwMCA4NDEuODkwMDAwXSAvQmxlZWRCb3ggWzAuMDAwMDAwIDAuMDAwMDAwIDU5NS4yNzYwMDAgODQxLjg5MDAwMF0gL1RyaW1Cb3ggWzAuMDAwMDAwIDAuMDAwMDAwIDU5NS4yNzYwMDAgODQxLjg5MDAwMF0gL0FydEJveCBbMC4wMDAwMDAgMC4wMDAwMDAgNTk1LjI3NjAwMCA4NDEuODkwMDAwXSAvQ29udGVudHMgNiAwIFIgL1JvdGF0ZSAwIC9Hcm91cCA8PCAvVHlwZSAvR3JvdXAgL1MgL1RyYW5zcGFyZW5jeSAvQ1MgL0RldmljZVJHQiA+PiAvQW5ub3RzIFsgNCAwIFIgXSAvUFogMSA+PgplbmRvYmoKNiAwIG9iago8PC9GaWx0ZXIgL0ZsYXRlRGVjb2RlIC9MZW5ndGggMTg0Pj4gc3RyZWFtCnicXY9PC4JAEMXvfoo5SrCuuru6/w5BhyAqiKBTdJJ0WQVdIt+9K5pBM/D4zW/gMZPnKk8V9USvupENdlS1UuJgz1oiNHiqVMwSaqXQXfnPtHCD6NxcV4P0XdtNYJ6jr4txpsec3pQ52kdR9KwktXTtKbora9TTMfTnc4QLUkENFQgS8BPMshAmJPC+gwW85PZdQPwuPShI7wpKZy6CleF8BRdzDEuT4WLBdyxHX0vT9v1rNe3QnHrV6qtbf9KtVqzfR7HPd98/AFOaVXwKZW5kc3RyZWFtCmVuZG9iago3IDAgb2JqCjw8IC9UeXBlIC9QYWdlIC9QYXJlbnQgMSAwIFIgL0xhc3RNb2RpZmllZCAoRDoyMDIzMDQxMTEwMTAwMCswMicwMCcpIC9SZXNvdXJjZXMgMiAwIFIgL01lZGlhQm94IFswLjAwMDAwMCAwLjAwMDAwMCA1OTUuMjc2MDAwIDg0MS44OTAwMDBdIC9Dcm9wQm94IFswLjAwMDAwMCAwLjAwMDAwMCA1OTUuMjc2MDAwIDg0MS44OTAwMDBdIC9CbGVlZEJveCBbMC4wMDAwMDAgMC4wMDAwMDAgNTk1LjI3NjAwMCA4NDEuODkwMDAwXSAvVHJpbUJveCBbMC4wMDAwMDAgMC4wMDAwMDAgNTk1LjI3NjAwMCA4NDEuODkwMDAwXSAvQXJ0Qm94IFswLjAwMDAwMCAwLjAwMDAwMCA1OTUuMjc2MDAwIDg0MS44OTAwMDBdIC9Db250ZW50cyA4IDAgUiAvUm90YXRlIDAgL0dyb3VwIDw8IC9UeXBlIC9Hcm91cCAvUyAvVHJhbnNwYXJlbmN5IC9DUyAvRGV2aWNlUkdCID4+IC9Bbm5vdHMgWyA5IDAgUiBdIC9QWiAxID4+CmVuZG9iago4IDAgb2JqCjw8L0ZpbHRlciAvRmxhdGVEZWNvZGUgL0xlbmd0aCAxNzc+PiBzdHJlYW0KeJxtj0ELgkAQhffzK+a4BLvqrroRdijoEEQFEXQKTpIuKxFFv72rmkEz8Hjz3sB8kZcsSwR1RK1qodFRoaXc4aCVQLhDLWMekVIKPM4PyXeFMEZx7pwTtG+bFs164JV7hea0HnDSwRyOo8hjkrT6MZLoLLVfDNHsbt63YYpchQWUIEjALrCIQpiRwKeEBXzNfFdA/JcRVHCjoLLmIljpzDdwM8ew0rFNWPGLiOJ+klM3TAQf27/qVxu9aVSVG2gu35m7V/8KZW5kc3RyZWFtCmVuZG9iagoxIDAgb2JqCjw8IC9UeXBlIC9QYWdlcyAvTWVkaWFCb3ggWzAuMDAwMDAwIDAuMDAwMDAwIDU5NS4yNzYwMDAgODQxLjg5MDAwMF0gL0NvdW50IDIgL0tpZHMgWyA1IDAgUiA3IDAgUiBdID4+CmVuZG9iagozIDAgb2JqCjw8IC9UeXBlIC9Gb250IC9TdWJ0eXBlIC9UeXBlMSAvQmFzZUZvbnQgL0hlbHZldGljYSAvRW5jb2RpbmcgL01hY1JvbWFuRW5jb2RpbmcgPj4KZW5kb2JqCjIgMCBvYmoKPDwgL1Byb2NTZXQgWy9QREYgL1RleHQgL0ltYWdlQiAvSW1hZ2VDIC9JbWFnZUldIC9Db2xvclNwYWNlIDw8IC9DcyAxIDAgUiA+PiAvRm9udCA8PCAvRjEuMCAzIDAgUiA+PiA+PgplbmRvYmoKNCAwIG9iago8PCAvVHlwZSAvQW5ub3QgL1N1YnR5cGUgL0xpbmsgL1JlY3QgWzAuMDAwMDAwIDAuMDAwMDAwIDU5NS4yNzYwMDAgODQxLjg5MDAwMF0gL0JvcmRlciBbMCAwIDBdIC9BIDw8IC9UeXBlIC9BY3Rpb24gL1MgL1VSSSAVP";
  } catch (error) {
    console.error("Error compiling LaTeX:", error);
    throw error;
  }
}
